package com.software.backend.entity;

import com.software.backend.enums.UserType;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.List;

@Entity
@Data
@ToString(exclude = "company")
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "user")
public class User implements UserDetails {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Applicant applicant;

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private Company company;



    @Column(
        unique = true,
        nullable = false
    )
    private String username;


    @Column(
        unique = true,
        nullable = false
    )
    private String email;


//    @Column( nullable = false ) must be addressed later next milestone
    private String password;

    @Column(
        name = "user_type",
        nullable = false
    )
    @Enumerated(EnumType.STRING)
    private UserType userType;

    @Column(name = "phone_number")
    private String phoneNumber;

    @CreationTimestamp
    @Column(
            name = "created_at",
            nullable = false,
            updatable = false
    )
    private LocalDateTime createdAt;

//
//    @Column(name = "google_client_id")
//    private String googleClientId;


    @Column(name = "is_banned")
    private Boolean isBanned;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority(userType.name()));
    }
    public boolean isAccountNonExpired() {
        return true;
    }

    public boolean isAccountNonLocked() {
        return true;
    }

    public boolean isCredentialsNonExpired() {
        return true;
    }

    public boolean isEnabled() {
        return true;
    }
}

/*
*   userType => enum   done
*   username => gmail without @gmail.com  (autogenerated)  (to be done in implementation)
*   change ouathId to google_client_id   (done)
*   remove ouathProvider     (done)
*   is_banned ?  a bit in the user table  (done)
*
* */


